<?php

namespace App\Repositories\LogReleases;

use App\Models\Deploys\Deploy;
use App\Models\LogReleases\LogRelease;
use App\Presenters\LogReleases\LogReleaseGridPresenter;
use App\Repositories\Core\CoreRepository;
use Illuminate\Support\Facades\Auth;
use Lampart\Hito\Core\Repositories\FilterQueryString\Filters\WhereClause;

class LogReleaseRepository extends CoreRepository
{
    protected $modelClass = LogRelease::class;

    protected $filters = [
        'name' => WhereClause::class
    ];

    protected $presenterClass = LogReleaseGridPresenter::class;

    public function create(array $attributes)
    {
        $data = array_except($attributes, ['_token']);

        $server_name = data_get($data, 'server');
        $data['user_id'] = Auth::id();
        $data['user_name'] = Auth::user()->name;
        $data['deploy_server_id'] = $this->getServerId($server_name);

        $data['redmine_id'] = data_get($data, "{$server_name}_redmine_id");
        $data['version'] = data_get($data, "{$server_name}_version");
        $data['release_type'] = $this->getReleaseType($data['redmine_id']);

        return parent::create($data); // TODO: Change the autogenerated stub
    }

    public function getServerId(string $server_name)
    {
        $data = Deploy::where('name', $server_name)->first()->toArray();
        return data_get($data, 'id');
    }

    public function getReleaseType(string $redmine_id)
    {
        if (LogRelease::where("redmine_id", $redmine_id)->first() == null) {
            return "New";
        } else {
            return "Back";
        }

    }

}
